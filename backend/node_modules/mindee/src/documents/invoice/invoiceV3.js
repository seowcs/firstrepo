"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InvoiceV3_instances, _InvoiceV3_initFromApiPrediction, _InvoiceV3_checklist, _InvoiceV3_reconstruct;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceV3 = void 0;
const document_1 = require("../document");
const fields_1 = require("../../fields");
const checks_1 = require("./checks");
const reconstruction_1 = require("./reconstruction");
class InvoiceV3 extends document_1.Document {
    constructor({ prediction, orientation = undefined, extras = undefined, inputSource = undefined, fullText = undefined, pageId = undefined, }) {
        super({
            inputSource: inputSource,
            pageId: pageId,
            orientation: orientation,
            fullText: fullText,
            extras: extras,
        });
        _InvoiceV3_instances.add(this);
        /** The company regitration information. */
        this.companyRegistration = [];
        /** The list of the taxes. */
        this.taxes = [];
        /** The payment information. */
        this.paymentDetails = [];
        /** The company registration information for the customer. */
        this.customerCompanyRegistration = [];
        __classPrivateFieldGet(this, _InvoiceV3_instances, "m", _InvoiceV3_initFromApiPrediction).call(this, prediction, pageId);
        __classPrivateFieldGet(this, _InvoiceV3_instances, "m", _InvoiceV3_checklist).call(this);
        __classPrivateFieldGet(this, _InvoiceV3_instances, "m", _InvoiceV3_reconstruct).call(this);
    }
    /** The total amount without the tax value. */
    get totalExcl() {
        return this.totalNet;
    }
    /** The total amount without the tax value. */
    set totalExcl(value) {
        this.totalNet = value;
    }
    /** The total amount with tax included. */
    get totalIncl() {
        return this.totalAmount;
    }
    /** The total amount with tax included. */
    set totalIncl(value) {
        this.totalAmount = value;
    }
    toString() {
        const taxes = this.taxes.map((item) => item.toString()).join("\n       ");
        const paymentDetails = this.paymentDetails
            .map((item) => item.toString())
            .join("\n                 ");
        const customerCompanyRegistration = this.customerCompanyRegistration
            .map((item) => item.toString())
            .join("; ");
        const companyRegistration = this.companyRegistration
            .map((item) => item.toString())
            .join("; ");
        const outStr = `----- Invoice V3 -----
Filename: ${this.filename}
Invoice number: ${this.invoiceNumber}
Total amount including taxes: ${this.totalIncl}
Total amount excluding taxes: ${this.totalExcl}
Invoice date: ${this.date}
Invoice due date: ${this.dueDate}
Supplier name: ${this.supplier}
Supplier address: ${this.supplierAddress}
Customer name: ${this.customerName}
Customer company registration: ${customerCompanyRegistration}
Customer address: ${this.customerAddress}
Payment details: ${paymentDetails}
Company numbers: ${companyRegistration}
Taxes: ${taxes}
Total taxes: ${this.totalTax}
Locale: ${this.locale}
----------------------
`;
        return InvoiceV3.cleanOutString(outStr);
    }
}
exports.InvoiceV3 = InvoiceV3;
_InvoiceV3_instances = new WeakSet(), _InvoiceV3_initFromApiPrediction = function _InvoiceV3_initFromApiPrediction(apiPrediction, pageId) {
    this.locale = new fields_1.Locale({
        prediction: apiPrediction.locale,
        valueKey: "language",
    });
    this.documentType = new fields_1.BaseField({
        prediction: apiPrediction.document_type,
        valueKey: "value",
    });
    this.totalIncl = new fields_1.Amount({
        prediction: apiPrediction.total_incl,
        valueKey: "value",
        pageId: pageId,
    });
    this.totalAmount = this.totalIncl;
    this.totalTax = new fields_1.Amount({
        prediction: { value: undefined, confidence: 0.0 },
        valueKey: "value",
        pageId: pageId,
    });
    this.totalNet = new fields_1.Amount({
        prediction: apiPrediction.total_excl,
        valueKey: "value",
        pageId: pageId,
    });
    this.date = new fields_1.DateField({
        prediction: apiPrediction.date,
        pageId,
    });
    apiPrediction.taxes.map((prediction) => this.taxes.push(new fields_1.TaxField({
        prediction: prediction,
        pageId: pageId,
        valueKey: "value",
        rateKey: "rate",
        codeKey: "code",
    })));
    this.companyRegistration = apiPrediction.company_registration.map(function (prediction) {
        return new fields_1.CompanyRegistration({
            prediction: prediction,
            pageId: pageId,
        });
    });
    this.dueDate = new fields_1.DateField({
        prediction: apiPrediction.due_date,
        pageId: pageId,
    });
    this.invoiceNumber = new fields_1.Field({
        prediction: apiPrediction.invoice_number,
        pageId: pageId,
    });
    this.supplier = new fields_1.Field({
        prediction: apiPrediction.supplier,
        pageId: pageId,
    });
    this.supplierAddress = new fields_1.Field({
        prediction: apiPrediction.supplier_address,
        pageId: pageId,
    });
    this.customerName = new fields_1.Field({
        prediction: apiPrediction.customer,
        pageId: pageId,
    });
    this.customerAddress = new fields_1.Field({
        prediction: apiPrediction.customer_address,
        pageId: pageId,
    });
    apiPrediction.customer_company_registration.map((prediction) => this.customerCompanyRegistration.push(new fields_1.CompanyRegistration({
        prediction: prediction,
        pageId: pageId,
    })));
    apiPrediction.payment_details.map((prediction) => this.paymentDetails.push(new fields_1.PaymentDetails({
        prediction: prediction,
        pageId: pageId,
    })));
}, _InvoiceV3_checklist = function _InvoiceV3_checklist() {
    this.checklist = {
        taxesMatchTotalIncl: (0, checks_1.taxesMatchTotalIncl)(this),
        taxesMatchTotalExcl: (0, checks_1.taxesMatchTotalExcl)(this),
        taxesAndTotalExclMatchTotalIncl: (0, checks_1.taxesAndTotalExclMatchTotalIncl)(this),
    };
}, _InvoiceV3_reconstruct = function _InvoiceV3_reconstruct() {
    (0, reconstruction_1.reconstructTotalTax)(this);
    (0, reconstruction_1.reconstructTotalExcl)(this);
    (0, reconstruction_1.reconstructTotalIncl)(this);
    (0, reconstruction_1.reconstructTotalTaxFromTotals)(this);
};
