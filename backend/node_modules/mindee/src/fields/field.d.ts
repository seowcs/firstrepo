import { Polygon } from "../geometry";
export declare type stringDict = {
    [index: string]: any;
};
export interface FieldConstructor {
    prediction: stringDict;
    valueKey?: string;
    reconstructed?: boolean;
    pageId?: number | undefined;
}
export interface BaseFieldConstructor {
    prediction: stringDict;
    valueKey?: string;
    reconstructed?: boolean;
}
export declare class BaseField {
    /** The value. */
    value?: any;
    /**
     * True if the field was reconstructed or computed using other fields.
     */
    reconstructed: boolean;
    /**
     * @param {Object} prediction - Prediction object from HTTP response
     * @param {String} valueKey - Key to use in the prediction dict
     * @param {Boolean} reconstructed - Does the object is reconstructed (not extracted by the API)
     */
    constructor({ prediction, valueKey, reconstructed, }: BaseFieldConstructor);
    toString(): string;
}
export declare class Field extends BaseField {
    /**
     * Contains exactly 4 relative vertices coordinates (points) of a right
     * rectangle containing the field in the document.
     */
    bbox: Polygon;
    /**
     * Contains the relative vertices coordinates (points) of a polygon containing
     * the field in the document.
     */
    polygon: Polygon;
    /** The document page on which the information was found. */
    pageId: number | undefined;
    /**
     * The confidence score of the prediction.
     */
    confidence: number;
    /**
     * @param {Object} prediction - Prediction object from HTTP response
     * @param {String} valueKey - Key to use in the prediction dict
     * @param {Boolean} reconstructed - Does the object is reconstructed (not extracted by the API)
     * @param {Integer} pageId - Page ID for multi-page document
     * @param {Array<String>} extraFields - Extra fields to get from the prediction and to set as attribute of the Field
     */
    constructor({ prediction, valueKey, reconstructed, pageId, }: FieldConstructor);
    compare(other: Field): boolean;
    /**
    @param {Array<Field>} array1 - first Array of Fields
    @param {Array<Field>} array2 - second Array of Fields
    @param {String} attr - Attribute to compare
    @returns {Boolean} - true if all elements in array1 exist in array2 and vice-versa, false otherwise
     */
    static compareArrays(array1: Field[], array2: Field[], attr?: string): boolean;
    /**
     * @param {Array<Field>} array - Array of Fields
     * @returns {Number} product of all the fields probaility
     */
    static arrayConfidence(array: any): number;
    /**
     * @param {Array<Field>} array - Array of Fields
     * @returns {Number} Sum of all the Fields values in the array
     */
    static arraySum(array: any): number;
}
