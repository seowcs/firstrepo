"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaxField = void 0;
const field_1 = require("./field");
const amount_1 = require("./amount");
class TaxField extends field_1.Field {
    /**
     * @param {Object} prediction - Prediction object from HTTP response
     * @param {String} valueKey - Key to use in the prediction dict to get the tax value
     * @param {String} rateKey - Key to use to get the tax rate in the prediction dict
     * @param {String} codeKey - Key to use to get the tax code in the prediction dict
     * @param {Boolean} reconstructed - Does the object is reconstructed (not extracted by the API)
     * @param {Integer} pageNumber - Page ID for multi-page document
     */
    constructor({ prediction, valueKey = "value", rateKey = "rate", codeKey = "code", reconstructed = false, pageId = undefined, }) {
        super({ prediction, valueKey, reconstructed, pageId });
        /** The tax amount. */
        this.value = undefined;
        /**  The tax code (HST, GST... for Canadian; City Tax, State tax for US, etc..). */
        this.rate = undefined;
        /** The tax rate. */
        this.code = undefined;
        this.rate = +parseFloat(prediction[rateKey]);
        if (isNaN(this.rate))
            this.rate = undefined;
        this.code = prediction[codeKey]?.toString();
        if (this.code === "N/A" || this.code === "None") {
            this.code = undefined;
        }
        this.value = parseFloat(prediction[valueKey]);
        if (isNaN(this.value)) {
            this.value = undefined;
            this.confidence = 0.0;
        }
    }
    toString() {
        let outStr = "";
        if (this.value !== undefined) {
            outStr += `${(0, amount_1.floatToString)(this.value)}`;
        }
        if (this.rate !== undefined) {
            outStr += ` ${(0, amount_1.floatToString)(this.rate)}%`;
        }
        if (this.code !== undefined) {
            outStr += ` ${this.code}`;
        }
        return outStr.trim();
    }
}
exports.TaxField = TaxField;
