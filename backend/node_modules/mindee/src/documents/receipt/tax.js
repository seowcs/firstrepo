"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiptTaxField = void 0;
const fields_1 = require("../../fields");
const amount_1 = require("../../fields/amount");
class ReceiptTaxField extends fields_1.TaxField {
    /**
     * @param {Object} prediction - Prediction object from HTTP response
     * @param {String} valueKey - Key to use in the prediction dict to get the tax value
     * @param {String} rateKey - Key to use to get the tax rate in the prediction dict
     * @param {String} codeKey - Key to use to get the tax code in the prediction dict
     * @param {Boolean} reconstructed - Does the object is reconstructed (not extracted by the API)
     * @param {Integer} pageNumber - Page ID for multi-page document
     */
    constructor({ prediction, valueKey = "value", rateKey = "rate", codeKey = "code", basisKey = "basis", reconstructed = false, pageId = undefined, }) {
        super({ prediction, valueKey, rateKey, codeKey, reconstructed, pageId });
        /**  The tax base */
        this.basis = undefined;
        this.basis = parseFloat(prediction[basisKey]);
        if (isNaN(this.basis))
            this.basis = undefined;
    }
    toString() {
        let outStr = "";
        if (this.value !== undefined) {
            outStr += `${(0, amount_1.floatToString)(this.value)}`;
        }
        if (this.rate !== undefined) {
            outStr += ` ${(0, amount_1.floatToString)(this.rate)}%`;
        }
        if (this.code !== undefined) {
            outStr += ` ${this.code}`;
        }
        if (this.basis !== undefined) {
            outStr += ` ${this.basis}`;
        }
        return outStr.trim();
    }
}
exports.ReceiptTaxField = ReceiptTaxField;
