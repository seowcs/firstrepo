"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ReceiptV4_instances, _ReceiptV4_initFromApiPrediction;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiptV4 = void 0;
const document_1 = require("../document");
const fields_1 = require("../../fields");
const tax_1 = require("./tax");
class ReceiptV4 extends document_1.Document {
    constructor({ prediction, orientation = undefined, extras = undefined, inputSource = undefined, fullText = undefined, pageId = undefined, }) {
        super({
            inputSource: inputSource,
            pageId: pageId,
            orientation: orientation,
            extras: extras,
            fullText: fullText,
        });
        _ReceiptV4_instances.add(this);
        /** List of taxes detected on the receipt. */
        this.taxes = [];
        __classPrivateFieldGet(this, _ReceiptV4_instances, "m", _ReceiptV4_initFromApiPrediction).call(this, prediction, pageId);
    }
    toString() {
        const taxes = this.taxes.map((item) => item.toString()).join("\n       ");
        const outStr = `----- Receipt V4 -----
Filename: ${this.filename}
Total amount: ${this.totalAmount}
Total net: ${this.totalNet}
Tip: ${this.tip}
Date: ${this.date}
Category: ${this.category}
Time: ${this.time}
Supplier name: ${this.supplier}
Taxes: ${taxes}
Total taxes: ${this.totalTax}
Locale: ${this.locale}
----------------------
`;
        return ReceiptV4.cleanOutString(outStr);
    }
}
exports.ReceiptV4 = ReceiptV4;
_ReceiptV4_instances = new WeakSet(), _ReceiptV4_initFromApiPrediction = function _ReceiptV4_initFromApiPrediction(apiPrediction, pageId) {
    this.locale = new fields_1.Locale({
        prediction: apiPrediction.locale,
        pageId: pageId,
    });
    this.totalTax = new fields_1.Amount({
        prediction: apiPrediction.total_tax,
        valueKey: "value",
        pageId: pageId,
    });
    this.totalAmount = new fields_1.Amount({
        prediction: apiPrediction.total_amount,
        valueKey: "value",
        pageId: pageId,
    });
    this.totalNet = new fields_1.Amount({
        prediction: apiPrediction.total_net,
        valueKey: "value",
        pageId: pageId,
    });
    this.tip = new fields_1.Amount({
        prediction: apiPrediction.tip,
        valueKey: "value",
        pageId: pageId,
    });
    this.date = new fields_1.DateField({
        prediction: apiPrediction.date,
        pageId: pageId,
    });
    this.category = new fields_1.Field({
        prediction: apiPrediction.category,
        pageId: pageId,
    });
    this.supplier = new fields_1.Field({
        prediction: apiPrediction.supplier,
        pageId: pageId,
    });
    this.time = new fields_1.Field({
        prediction: apiPrediction.time,
        pageId: pageId,
    });
    apiPrediction.taxes.map((taxPrediction) => this.taxes.push(new tax_1.ReceiptTaxField({
        prediction: taxPrediction,
        pageId: pageId,
        valueKey: "value",
        rateKey: "rate",
        codeKey: "code",
        basisKey: "basis",
    })));
};
